Java3D
======
La terminologie étant extrêmement importante, ce petit tuto devrait vous permet-
tre d'au moins appréhender les concepts fondamentaux de Java3D.

Positionnement de Java3D:
						VRML (Virtual Reality Modeling Language)
							|
						  Java3D (langage java)
							|
						 OpenGL (C routines)

Composition 3D

Les élements de bases sont toujours les Vertices (Vertex) et les index qui perm-
ettent la connectivité des points afin de former les triangles de tessalation.

Base de la programmation 3D

1. Chargement des vertices
2. Chargement des index
3. Conversion 3D->2D. Cette conversion est fonction de la position de l'observat
eur et de la scène ainsi que de la perspective (cfr Field of View FOV)
4. Dessiner les triangles dans un context graphique 2D.
5. afficher le rendu

Projection de 3D en 2D.
Consiste essentiellement en quelques transformation mathématiques basiques. Je
me suis par le passé intéressé à cette problématique et ai consigné les résumés
de mes recherches sur le net dans: Aspect Théoriques de la 3D et DirectX Managé.
Je ne vais donc pas m'étendre sur le sujet.

Elimination des faces cachées:
Vecteur normal: on calcul le vecteur normal à chaque surface de triangle. Les
triangles ayant des normales pointant dans le sens opposé de l'observateur sont
éliminés. Méthode simple mais pas géniale

Algorithme du peintre : on affiche les triangles les plus éloignées puis les pl-
us proche. Ce qui permet d'éliminer ce qui ne doit pas apparaître

Z- Buffer: à chaque pixel, en plus d'une position x,y et une couleur on associe
une position Z (profondeur). Les pixels les plus proches de l'observateur sont
rendus en premier et stocké en Z. Si un pixel occupant la position (x,y) a déjà
une valeur de Z, alors il est inutile de le réaficher. C'est gourmand en haute
résolution mais précis.

Lumière:
L'intensité est maxiamle si le vecteur normal à la surface du triangle est dans
la direction du rayon envoyé par la source de lumière.

Eléments de java3D:
SimpleUniverse: helper class sur java3D mais encapsule aussi la scène.
L'idée est d'ajouter des BranchGroup: noeud d'arbre contenant les sous scène à 
la scène principale.

Behavior = Interface qui agit comme un lien entre un stimulus et une action. 
Exemplede stimulus (events)
Interpolator() : permet d'interpoler un déplacement
	- utilise Alpha pour déterminer le temps de l'animation
	- utilise BoundingSphere pour déterminer le clipping
MouseRotate() : permet d'utiliser la souris pour tourner
MouseTranslate() : permet d'utiliser la souris pour se tranlater

TransformGroup : Create the behavior.

Scenegraph
==========
Le scenegraph est l'un des fondements de Java3D puisqu'il permet d'assembler les
éléments de la scène.

VirtualUniverse: Il s'agit du monde virtuelle dans lequel vont être définis vos
objets géométriques mais aussi d'autres objets tels que les lampes,...

VirtualUniverse:---->SceneGraphs--->Group--->Node

Le SceneGraph se comporte comme un arbre de fichier: les Node sont les fichiers,
les groupes les folders. Un folder peut contenir des folders et des fichiers

Il y a différents types de Node et de Group:

Node = {
	Management Node : Locale, BranchGroup, TransformGroup, ViewPlatform, Switch,
	... Ils dérivent de Group et gèrent une collection de noeuds enfants.
	Geometry Node : Shape3D, Background, .... Ces objets dérivent d'une feuille 
	et définissent la géométrie visible dans le monde virtuelle
	Control, influence Node - Behaviors, Morph, Light, Sound and Clip,... ils 
	définissent les comportements (réactions) de l'application.
}
Le Node contient une frontière (Boundary ou Bounds en Java3D). Le Bound définit
le volume d'espace dans lequel se trouve le noeud géométrique. Il peut être sphé
rique ou carré.
Les Bound sont utilisés à des fin d'optimization (pour le rendering par exemple)

Group = {
	BranchGroup (BG) : contient des noeuds enfants
	TransformGroup (TG) : contient des translations, rotation, scaling et toute 
	autre information concernant les noeuds enfants.
}

En Java3D, le scenegraph contient deux branches majeures:
- Scene : contient les éléments géométriques et leur organisation
- View : La vue est capable de rendre la scène via l'objet ViewPlatform (VP). Le
VP es en réalité un point de Vue
Le scenegraph est contenu dans les Locales d'un univers.

Structure:
				Univers
					|
					Locales
					|
					BG				BG
					|				|
					TG Light		TG
					|				|
					BG Shape3D		VP <-View <-Canvas3D
					
1) Retain Mode
Ce mode de travail délègue tout le rendu de la scène au ScenGraph, c'est en gén-
éral la manière recommandée de travailler. Par contre on perd certaines possibi-
lités liées à l'exploitation directe d'OpenGL ou DirectX

2) Immediate Mode
Dans ce mode on a besoin d'un SceneGraph Réduit:
Universe
   |
Locale
   |
   BG
	|
	VP -> View <-Canvas3D
	
2.1 Boucle de rendu en mode immédiat
preRender : hook pour préparer les structure de données pour le rendu
renderField : hook pour changer la manière de rendre la scene (sorte de hack sur
le render)
postRender : hook sur après rendu, peut éliminer des allocatons
postSwap : appelé après le flip de la surface de travaille sur la surface vis-
ible

Ex: Changer le renderField
on considère la structure de point suivante, qu'il faudra initialiser
private PointArray m_nPointArray= new PointArray(10*10, 
GeometryArray.COORDINATES);

on change le render:
public ImmediateCanvas3D extends Canvas3D {
// polymorphisme
	public void renderField (int fieldDesc) {
		GraphicsContext3D g = getGraphicsContext3D() // récupérer le contexte3D
		if (m_bInitialisation) {
			// Créer une lampes
			DirectionalLight light = new DirectionalLight();
			light.setEnable(true);
			g.addLight (light); // ajoute la lampe au contexte3D
			
			// Crée le matérieau
			Appearance a = new Appearance();
			Material mat = new Material();
			mat.setLightEnable (true);
			mat.setAmbientColor(0.5f, 1.0f, 1.0f);
			a.setMaterial(mat);
			
			g.setAppearance(a);
			
			// reste du code
			
			// au final on affiche le rendu
			g.draw( m_PointArray);
		}
	}
}

Il est possible d'utiliser preRender pour modifier une transformation associée
au contexte graphique. Exemple faire tourner les points autours d'un axe, en 
incrémentant l'angle de rotation dans le preRender.

3) MixedMode

On va comibner les 2 modes (immediate et retain). Exemple utiliser un TG avant
d'appeler le renderField.

Compilation du SceneGraph

L’un des objets le plus important du sceneGraph est le Shape3D.
permet de réaliser des optimisations en fusionnant des apparences ou des 
géométries communes.

Node:
javax.media.j3d.SceneGraphObject
	+-jax.media.j3d.Node
Node est une interface de SceneGraph
Il existe deux type de noeuds dan le sceneGraph, les groupes qui sont des colle-
ctions de noeuds et les Leaf qui sont des noeuds terminaux qui ne contiennent 
plus de noeud enfants.

Bounds et CollisionBounds
Chaque Node du scene graph contient une structure Bound ou CollisionBound qui 
détermine le volume de sa géométrie.

Il existe 3 classes pouvant implémenter le Bounding:
-BoundingBox
-BoundingSphere
-BoundingPolytope

Il est possible d’autocalculer les bounds:
Ex:
ColorCube cube = new ColorCube(2.0f);
cube.setBoundsAutoCompute(true);

Les groupes:
Group
javax.media.j3d.SceneGraphObject
	+-jax.media.j3d.Node
+ javax.media.j3d.Group

Switch
Groupe spéciale qui permet de cacher ou d’afficher des noeuds conditionnellement 
en utilisant un BitSetMask

BranchGroup
est un group qui peut dynamiquement en runtime ajouter ou retirer des Node

OrderGroup:
permet de donner plus de granularité sur les noeuds qui sont affichés en priori-
té

Primitive:
com.sun.j3d.utils.geometry.Primitive
Un groupe de base pour les primitives géométriques telles que:Box, Sphere, Cone,
...
Attention il s’agit d’une classe abstraite

TransformGroup
Contient toutes les opérations géométriques qui vont s’appliquer aux enfants du 
groupes: Scaling, translation, rotation. Il s’agit de matrices 4*4 que l’on peut
appliquer aux Noeuds géométrique pour implémenter ces transformations.


Définir l’Univers
=================
L’élément le plus important en Java3D est le choix de l’univers à considérer 
(est-on à l’échelle de la galaxie, une rue, une pièce,  un gluon ou encore la 
distance Planck).

VirtualUniverse
	SimpleUniverse

Virtual Universe contient le monde virtuel qui sera peuplé par les objets créés 
par le développeur.
Un Locale représente une aire géographique dans le virtual universe. Les locales 
utilise des HiResCoord (8 bytes= 256 bits) pour les représentation x,y,z des 
points.

La première chose à faire est d’ancrer le Locale dans l’univers.

Structure de HiResCoord:
8 8 8 8   8 8 8 8
0 0 0 0 . 0 0 0 0
4 3 2 1   -1 -2 -3 -4
La partie unité (4eme byte) représente le mètre.

Représentation des distance:
2^53.07 = 1 année lumière
2^9.97 = 1 km
2^0 = 1m
2^-19 = 1micron

Si je veux représenter 1 distance de 1 année lumière en x, je dois mettre à 1
le 53ème bits de la coordonnée X HiResCoord. Or si je me place à partir du mètre
cela revient à mettre le (53-32) = 21ème bits à 1 dans le troisième integer du
tableau en partant du point.
X en HiResCoord vaut donc 2^21 = 0x200000 pour représenter une année lumière.

Affichage du Locale
Le locale peut-être rempli d'objet géométrique. Il devra être rendu dans un obj-
et View attaché à une instance ViewPlatform du SceneGraph. View sera lui même 
attaché à 1 ou plusieurs Canvas3D
			Universe	
				|
				Locale (position dans l'univers, via HiResCoord)
				|
				BG (contient les objets géométriques)
				|
				TG (Transform group: scale, rotation, translation)
				|
				VP<-View <-Canvas3D
Ce qui se traduit par :

BranchGroup vpBranchGroup = new BranchGroup();
TransformGroup tg = new TransformGroup();

ViwPlatform vp = new ViewPlatform();

vp.setViewAttachPolicy( View.RELATIVE_TO_FIELD_OF_VIEW);

tg.addChil( vp );

vpBranchGroup.addChild( tg);
locale.addBranchGraph(vpBranchGroup);

View view = new View();
view.attachViewPlatform( vp );
view.setBackClipDistance (110);
view.seetFrontClipDistance (10 );

//create the Canvas3D that the View will render into.
//get the graphics capabilities of the system and create
//the best Canvas3D possible.
GraphicsConfigTemplate3D gc3D = new GraphicsConfigTemplate3D();
gc3D.setSceneAntialiasing( GraphicsConfigTemplate.PREFERRED );
GraphicsDevice gd[] = GraphicsEnvironment.
getLocalGraphicsEnvironment().getScreenDevices();
Canvas3D c3d = new Canvas3D( gd[0].getBestConfiguration( gc3D ) );
//set the size of the Canvas3D
c3d.setSize( 512, 512 );
//add the Canvas3D to the View so that it is rendered into
view.addCanvas3D( c3d );
//add the Canvas3D component to a parent AWT or Swing Panel
add( c3d );

SimpleUniverse
com.sun.j3d.utils.SimpleUniverse 

Permet de gérer des changements de vues (ex:vue du haut, puis vue en perspective
). Exemple : ViewingPlatform () et ViewerAvatar.

DataModels
==========
- Surface (skin) model
- Voxel (Voluùe model)
- Modèle paramétrique mathématiques

Modèle surface
Géométrie = collection de triangles. Cette technique modélise uniquement des
surfaces sur lequelles on appliquera des textures (skins)

Voxel
permet de reconstituer les parties internes d'un volume. Très utile en imagerie
médicale puisque cela permet de faire des vues en coupe des organes. (cfr Algori-
thme du "Marching Cube" W.E Lorensen)

Modèles mathématiques
On peut utiliser des splines pour éléminer l'effet de triangularisation.
Ex: Non-Uniform Relational B- Splines (NURBS)

Des compromis entre qualité de rendu (nombre de polygones), mémoire, CPU et FPS
doivent être faits en fonction de la nature de l'application.

sun propose des interfaces ObjectLoaders pour pouvoir charger des objets indépen
dants (ex: objets VRML, DXF, ...). Ceci permet aux designers et aux dev de se 
concentrer sur leurs tâches respectives en parallèle.

Références géométriques
=======================
Il y a trois types de géométries:
- Shape3D (javax.media.j3d)
- Classes primitives dérivées (sun.java.j3d.utils.Box, Sphere, Cone, ...)
- Text 2D et 3D

Shape3D
Rappel:
javax.media.j3d.SceneGraphObject
	+--javax.media.j3d.Node
		+---- javax/media.j3d.Leaf
			+--- javax.media.j3d.Shape3D
			

Un object Shape3D fait toujours référence à une apparence (qui définit, le
matériau, le type de trait, de point, ...)

Il est possible d'associer:
- une géométrie au Shape3D telle que : QuadArray, PointArray, TriangleArray
au moyen de setGeometry()
- d'ajouter des UserData, ex: setUserData(java.lang.Object userData)
Cet objet peut contenir des informations custom sur le Shape3D, être utilisé 
pour identifier l'objet lorsqu'il est sélectionné.

Les primitives
Ils ne font pas partie de javax.media.j3d mais dérive de groupe. Une primitive 
n'est pas un Shape3D, elle regroupe plusieurs Shape3D.
Exemple de primitive : Sphere,Cone, Box


